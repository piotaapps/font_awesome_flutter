import 'dart:convert';
import 'dart:io';

import 'package:recase/recase.dart';

void main(List<String> arguments) {
  var file = new File(arguments.first);

  if (!file.existsSync()) {
    print('Cannot find the file "${arguments.first}".');
  }

  var content = file.readAsStringSync();
  Map<String, dynamic> icons = json.decode(content);

  Map<String, String> iconDefinitions = {};

  for (String iconName in icons.keys) {
    var icon = icons[iconName];
    var unicode = icon['unicode'];
    List<String> styles = (icon['styles'] as List).cast<String>();

    if (styles.length > 1) {
      if (styles.contains('regular')) {
        styles.remove('regular');
        iconDefinitions[iconName] = generateIconDefinition(
          iconName,
          'regular',
          unicode,
        );
      }

      for (String style in styles) {
        String name = '${style}_$iconName';
        iconDefinitions[name] = generateIconDefinition(
          name,
          styles.first,
          unicode,
        );
      }
    } else {
      iconDefinitions[iconName] = generateIconDefinition(
        iconName,
        styles.first,
        unicode,
      );
    }
  }

  List<String> generatedOutput = [
    'library font_awesome_flutter;',
    '',
    "import 'package:flutter/widgets.dart';",
    "import 'package:font_awesome_flutter/icon_data.dart';",
    '',
    '// THIS FILE IS AUTOMATICALLY GENERATED!',
    '',
    'class FontMap {',
    'static FontMap _instance;',
    'Map _map;',
    '',
    'factory FontMap() {',
    'if (_instance == null) {',
    '  _instance = FontMap._internal();',
    '}',
    'return _instance;',
    '}',
    '',
    'Map get getFontMap => _map;',
    'void setFontMap() {',
  ];

  generatedOutput.addAll(iconDefinitions.values);

  generatedOutput.addAll([
    '}',
    '',
    'IconData getIcon(String icon) => _map[icon];',
    '',
    'FontMap._internal();'
        '',
    '}',
    ''
  ]);

  File output = new File('lib/font_awesome_flutter_map.dart');
  output.writeAsStringSync(generatedOutput.join('\n'));
}

String generateIconDefinition(String iconName, String style, String unicode) {
  style = '${style[0].toUpperCase()}${style.substring(1)}';

  String iconDataSource = 'IconData$style';

  if (iconName == '500px') {
    iconName = 'fiveHundredPx';
  }

  iconName = new ReCase(iconName).camelCase;
  return '_map.putIfAbsent("$iconName", () => $iconDataSource(0x$unicode));';
}
